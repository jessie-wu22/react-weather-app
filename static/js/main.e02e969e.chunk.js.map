{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","className","Form","props","onSubmit","getWeather","type","name","placeholder","Weather","city","country","temperature","humidity","description","error","require","config","API_KEY","process","App","state","undefined","decription","e","a","preventDefault","target","elements","value","fetch","apiCall","json","data","setState","main","temp","sys","weather","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0RAaeA,EAXA,kBACb,6BACE,wBAAIC,UAAU,0BAAd,oBACA,uBAAGA,UAAU,6BAAb,kCAEE,6BAFF,+BCQWC,EAXF,SAACC,GAAD,OAIX,0BAAMC,SAAUD,EAAME,YACpB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,kBAC3C,2BAAOF,KAAK,OAAOC,KAAK,UAAUC,YAAY,qBAC9C,iDC4BWC,EAnCC,SAACN,GAAD,OAGd,yBAAKF,UAAU,iBACZE,EAAMO,MAAQP,EAAMQ,SACnB,uBAAGV,UAAU,gBAAb,YAEE,0BAAMA,UAAU,kBACb,IACAE,EAAMO,KAFT,KAEiBP,EAAMQ,QAAS,MAInCR,EAAMS,aACL,uBAAGX,UAAU,gBAAb,eAEE,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMS,YAAzC,MAGHT,EAAMU,UACL,uBAAGZ,UAAU,gBAAb,YAEE,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMU,SAAzC,MAGHV,EAAMW,aACL,uBAAGb,UAAU,gBAAb,cAEE,0BAAMA,UAAU,kBAAhB,IAAmCE,EAAMW,YAAzC,MAGHX,EAAMY,OAAS,uBAAGd,UAAU,kBAAkBE,EAAMY,SC5BzDC,EAAQ,IAAUC,SAElB,IAAMC,EAAUC,mCAgGDC,E,4MA3FbC,MAAQ,CACNT,iBAAaU,EACbZ,UAAMY,EACNX,aAASW,EACTT,cAAUS,EACVC,gBAAYD,EACZP,WAAOO,G,EAETjB,W,uCAAa,WAAOmB,GAAP,qBAAAC,EAAA,6DACXD,EAAEE,iBAEIhB,EAAOc,EAAEG,OAAOC,SAASlB,KAAKmB,MAC9BlB,EAAUa,EAAEG,OAAOC,SAASjB,QAAQkB,MAJ/B,SAMWC,MAAM,oDAAD,OAC2BpB,EAD3B,YACmCC,EADnC,kBACoDO,IAPpE,cAMLa,EANK,gBAWQA,EAAQC,OAXhB,OAWLC,EAXK,QAePvB,GAAQC,IACV,EAAKuB,SAAS,CACZtB,iBAAaU,EACbZ,UAAMY,EACNX,aAASW,EACTT,cAAUS,EACVR,iBAAaQ,EACbP,MAAO,wCAGPL,GAAQC,EACV,EAAKuB,SAAS,CACZtB,YAAaqB,EAAKE,KAAKC,KACvB1B,KAAMuB,EAAK1B,KACXI,QAASsB,EAAKI,IAAI1B,QAClBE,SAAUoB,EAAKE,KAAKtB,SACpBC,YAAamB,EAAKK,QAAQ,GAAGxB,YAC7BC,MAAO,KAGT,EAAKmB,SAAS,CACZtB,iBAAaU,EACbZ,UAAMY,EACNX,aAASW,EACTT,cAAUS,EACVR,iBAAaQ,EACbP,MAAO,wCAzCA,4C,6GAiDX,OACE,6BACE,yBAAKd,UAAU,WACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,2BACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,2BACb,kBAAC,EAAD,CAAMI,WAAYkC,KAAKlC,aACvB,kBAAC,EAAD,CACEO,YAAa2B,KAAKlB,MAAMT,YACxBC,SAAU0B,KAAKlB,MAAMR,SACrBH,KAAM6B,KAAKlB,MAAMX,KACjBC,QAAS4B,KAAKlB,MAAMV,QACpBG,YAAayB,KAAKlB,MAAMP,YACxBC,MAAOwB,KAAKlB,MAAMN,kB,GA5EpByB,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3C,GACL4C,QAAQ5C,MAAMA,EAAM6C,c","file":"static/js/main.e02e969e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = () => (\n  <div>\n    <h1 className=\"title-container__title\">Your Weather App</h1>\n    <p className=\"title-container__subtitle\">\n      Find out the weather conditions\n      <br />\n      in any city in the world!\n    </p>\n  </div>\n);\n\nexport default Titles;\n","import React from \"react\";\n// if class has no state, can make it into a stateless functional component --> only want to display some UI on the screen don't need to import all this class functionality\nconst Form = (props) => (\n  // props is an HTML attribute\n  // setting up a React attribute called onSubmit, which calls this.props.getWeather\n  // this.props.getWeather --> calls the props called getWeather, found in App.js\n  <form onSubmit={props.getWeather}>\n    <input type=\"text\" name=\"city\" placeholder=\"Enter city...\" />\n    <input type=\"text\" name=\"country\" placeholder=\"Enter country...\" />\n    <button>Get Weather</button>\n  </form>\n);\n\nexport default Form;\n","import React from \"react\";\n\nconst Weather = (props) => (\n  // displays values of all the states on screen by passing the values in App.js to weather component --> using props\n  // using and operator so that information titles + its value only shown if those pieces of info exist (ex. a city and country are entered by user)\n  <div className=\"weather__info\">\n    {props.city && props.country && (\n      <p className=\"weather__key\">\n        Location:\n        <span className=\"weather__value\">\n          {\" \"}\n          {props.city}, {props.country}{\" \"}\n        </span>\n      </p>\n    )}\n    {props.temperature && (\n      <p className=\"weather__key\">\n        Temperature:\n        <span className=\"weather__value\"> {props.temperature} </span>\n      </p>\n    )}\n    {props.humidity && (\n      <p className=\"weather__key\">\n        Humidity:\n        <span className=\"weather__value\"> {props.humidity} </span>\n      </p>\n    )}\n    {props.description && (\n      <p className=\"weather__key\">\n        Conditions:\n        <span className=\"weather__value\"> {props.description} </span>\n      </p>\n    )}\n    {props.error && <p className=\"weather__error\">{props.error}</p>}\n  </div>\n);\n\nexport default Weather;\n","import React from \"react\";\n\nimport Titles from \"./components/Titles\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\nrequire(\"dotenv\").config();\n\nconst API_KEY = process.env.REACT_APP_SECRET_KEY;\n\n// initialize the component by creating an instance of App\nclass App extends React.Component {\n  // state object, here it represents initial state of object, object within a component that keeps track of changing data within a component (ie. any interaction with app that causes data to change)\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    decription: undefined,\n    error: undefined,\n  };\n  getWeather = async (e) => {\n    e.preventDefault();\n    // creates constant that stores the method that makes the API call\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const apiCall = await fetch(\n      `http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}`\n    );\n\n    // converts the data (into json format), which converts data received from API to a readable format for program\n    const data = await apiCall.json();\n    // setting values of states in function\n    // if city and country return true, then render code that comes below\n\n    if (city || country) {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please a valid city and/or country.\",\n      });\n    }\n    if (city && country) {\n      this.setState({\n        temperature: data.main.temp,\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity,\n        description: data.weather[0].description,\n        error: \"\",\n      });\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please a valid city and/or country.\",\n      });\n    }\n  };\n\n  render() {\n    // render method returns JSX\n    // can only return one parent element (between h tags)\n    return (\n      <div>\n        <div className=\"wrapper\">\n          <div className=\"main\">\n            <div className=\"container\">\n              <div className=\"row\">\n                <div className=\"col-x-5 title-container\">\n                  <Titles />\n                </div>\n                <div className=\"col-xs-7 form-container\">\n                  <Form getWeather={this.getWeather} />\n                  <Weather\n                    temperature={this.state.temperature}\n                    humidity={this.state.humidity}\n                    city={this.state.city}\n                    country={this.state.country}\n                    description={this.state.description}\n                    error={this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n// API note: Form getWeather={this.getWeather}\n// goal: give Form component in App.js access to the props in Form.js file\n//getWeather is a props name, this gets set to a JS expression --> here you set the value to getWeather function\n// this now means we have access to getWeather function in Form.js\n\nexport default App; // makes App component available for other files to import (index.js)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}